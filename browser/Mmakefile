#-----------------------------------------------------------------------------#
# Copyright (C) 1998-2002 The University of Melbourne.
# This file may only be copied under the terms of the GNU General
# Public License - see the file COPYING in the Mercury distribution.
#-----------------------------------------------------------------------------#

# browser/Mmakefile - this is the Mmakefile for building the Mercury
# browser library, which also includes other functionality needed
# by Mercury debuggers.

# Since the code in this directory is intended to be invoked only from
# the trace library, which turns off tracing in the Mercury code it calls,
# compiling the modules in this directory with tracing on only makes
# the generated code much bigger. However, since all Mercury code
# in an executable must be of the same grade, we need to be able to
# compile the modules in this directory in debug grades as well.

MERCURY_DIR=..
LINK_STDLIB_ONLY=yes
include $(MERCURY_DIR)/Mmake.common

# Module-specific options should go in Mercury.options so they
# can be found by `mmc --make'.
include Mercury.options

MAIN_TARGET=library
MERCURY_MAIN_MODULES=$(BROWSER_LIB_NAME) browse_test declarative_test

#-----------------------------------------------------------------------------#

# Specify which compilers to use to compile the library.
# Don't change these without good reason - if you want to
# do a temporary change, change ../Mmake.params.

CFLAGS	+=	$(DLL_CFLAGS) -I$(TRACE_DIR)
MLFLAGS +=	-R$(FINAL_INSTALL_MERC_LIB_DIR)	\
		-R$(FINAL_INSTALL_MERC_GC_LIB_DIR)
MLLIBS +=	$(SOCKET_LIBRARY) $(NSL_LIBRARY) $(DL_LIBRARY)	\
		$(READLINE_LIBRARIES)

MTAGS	=	$(SCRIPTS_DIR)/mtags

LN	=	ln

#-----------------------------------------------------------------------------#

# Stuff for Windows DLLS using gnu-win32

ifeq ($(USE_DLLS),yes)

DLL_CFLAGS = -Dlib$(BROWSER_LIB_NAME)_DEFINE_DLL

include $(MERCURY_DIR)/Makefile.DLLs

else

DLL_CFLAGS =
DLL_DEF_LIB =

endif

#-----------------------------------------------------------------------------#

# targets

.PHONY: all
all : library browse_test declarative_test

DEPENDS = $(BROWSER_LIB_NAME).depend browse_test.depend declarative_test.depend
.PHONY: depend
depend		: $(DEPENDS)
$(DEPENDS)	: Mercury.modules

# This directory contains source files for which the module
# name doesn't match the file name, so smart recompilation
# won't work without the Mercury.modules file.
.PHONY: Mercury.modules
Mercury.modules:
	$(MC) -f *.m

.PHONY: check
check		: $(BROWSER_LIB_NAME).check

.PHONY: all-ints 
all-ints: ints int3s

.PHONY: ints 
ints		: $(BROWSER_LIB_NAME).ints \
			browse_test.ints declarative_test.ints

.PHONY: int3s 
int3s		: $(BROWSER_LIB_NAME).int3s

#-----------------------------------------------------------------------------#

tags		: $(MTAGS) $($(BROWSER_LIB_NAME).ms)
	$(MTAGS) $($(BROWSER_LIB_NAME).ms) ../library/*.m

$(BROWSER_LIB_NAME).stats : $(COMPILER_DIR)/source_stats.awk \
				$($(BROWSER_LIB_NAME).ms)
	awk -f $(COMPILER_DIR)/source_stats.awk \
		`vpath_find $($(BROWSER_LIB_NAME).ms)` > $@
	
#-----------------------------------------------------------------------------#

.PHONY: dates
dates		:
	touch $($(BROWSER_LIB_NAME).dates)

#-----------------------------------------------------------------------------#

.PHONY: os cs ss
ifeq ($(MMAKE_USE_MMC_MAKE),no)
os: $($(BROWSER_LIB_NAME).os)
cs: $($(BROWSER_LIB_NAME).cs)
ss: $($(BROWSER_LIB_NAME).ss)
else
os: $(BROWSER_LIB_NAME).os
cs: $(BROWSER_LIB_NAME).cs
ss: $(BROWSER_LIB_NAME).ss
endif

#-----------------------------------------------------------------------------#

.PHONY: library
library: lib$(BROWSER_LIB_NAME)

# Ensure we recompile mdb__version if VERSION is changed.
$(os_subdir)mdb.o \
$(os_subdir)mdb.pic_o \
        : $(RUNTIME_DIR)/mercury_conf.h

#-----------------------------------------------------------------------------#

# In the past we generated libmdb.* and then linked
# libmer_browser.* to the files.
realclean_local:
	rm -rf libmdb.so libmdb.a mdb.init
	rm -f Mercury.modules tags

#-----------------------------------------------------------------------------#

# Installation targets

.PHONY: install
install: install_init install_library

.PHONY: install_dirs
install_dirs:
	[ -d $(INSTALL_MODULE_DIR) ] || mkdir -p $(INSTALL_MODULE_DIR)
	[ -d $(INSTALL_MERC_LIB_DIR) ] || mkdir -p $(INSTALL_MERC_LIB_DIR)

ifeq ($(findstring il,$(GRADE)),il)                                     

# there is no browser in the .NET backend

.PHONY: install_init
install_init: 

.PHONY: install_library
install_library:

else 

.PHONY: install_init
install_init: $(BROWSER_LIB_NAME).init install_dirs
	cp `vpath_find $(BROWSER_LIB_NAME).init` $(INSTALL_MODULE_DIR)


.PHONY: install_library
install_library: lib$(BROWSER_LIB_NAME).$A \
		lib$(BROWSER_LIB_NAME).$(EXT_FOR_SHARED_LIB) install_dirs
	cp `vpath_find lib$(BROWSER_LIB_NAME).$A \
		lib$(BROWSER_LIB_NAME).$(EXT_FOR_SHARED_LIB)` \
		$(INSTALL_MERC_LIB_DIR)

endif


